import java.text.SimpleDateFormat

def releaseTime() {
    return new SimpleDateFormat("yyyy-MM-dd").format(new Date())
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.tobacco.xinyiyun.knowledge"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "v1.0.0"
    }


    lintOptions {
        abortOnError false
        absolutePaths false
        lintConfig file("lint.xml")
    }
    packagingOptions {
        exclude 'META-INF/*'
    }
    buildTypes {
        debug {
            buildConfigField 'String', 'BASE_URL', '"http://222.219.184.73:9999/jyycs/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField 'String', 'BASE_URL', '"http://222.219.184.73:9999/jyycs/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                def productFlavor = variant.productFlavors[0];
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def productName = null
                    if (productFlavor != null) {
                        productName = productFlavor.name
                        if (productName.startsWith("_")) {
                            productName = productName.replace("_", "")
                        }
                    }
                    def fileName = variant.buildType.name + "-" + releaseTime() + "-v" + defaultConfig.versionName + (productName == null ? "" : ("-" + productName)) + ".apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }

            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies['support-v4']
    compile rootProject.ext.dependencies['appcompat-v7']
    compile rootProject.ext.dependencies['design']
    compile rootProject.ext.dependencies['recyclerview-v7']
    compile rootProject.ext.dependencies['butterknife']
    compile rootProject.ext.dependencies['rxlifecycle']
    compile rootProject.ext.dependencies['rxlifecycle-components']
    compile rootProject.ext.dependencies['rxjava']
    compile rootProject.ext.dependencies['rxandroid']
    compile rootProject.ext.dependencies['logger']
    compile rootProject.ext.dependencies['ormlite']
    compile rootProject.ext.dependencies['okhttp']
    compile rootProject.ext.dependencies['okhttp-logging']
    compile rootProject.ext.dependencies['retrofit']
    compile rootProject.ext.dependencies['retrofit-adapter-rxjava']
    compile rootProject.ext.dependencies['retrofit-converter-gson']
    compile rootProject.ext.dependencies['glide']
    compile rootProject.ext.dependencies['material-dialogs']
    compile rootProject.ext.dependencies['recyclerview-adapter']
    compile rootProject.ext.dependencies['circleimageview']
    compile rootProject.ext.dependencies['statusbaruitl']
    compile rootProject.ext.dependencies['alphatabs']
    compile rootProject.ext.dependencies['rollviewpager']
    compile rootProject.ext.dependencies['superTextView']
    compile rootProject.ext.dependencies['process-button']
    compile rootProject.ext.dependencies['loadingView']
    compile rootProject.ext.dependencies['smartRefreshLayout']
    compile rootProject.ext.dependencies['smartRefreshHeader']
    compile rootProject.ext.dependencies['expandableListAdapter']
    compile rootProject.ext.dependencies['rxpermissions']
    compile rootProject.ext.dependencies['compressor']
    compile rootProject.ext.dependencies['rxbus']

}